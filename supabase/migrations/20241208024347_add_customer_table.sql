
CREATE TABLE IF NOT EXISTS public.customer (
    id BIGINT generated by default as IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users NOT NULL,
    details jsonb not null,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create the trigger
CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON public.customer
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- Enable Row-Level Security (RLS)
ALTER TABLE public.customer ENABLE ROW LEVEL SECURITY;

-- Create the "Users can view own data" policy
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_policies
        WHERE schemaname = 'public'
          AND tablename = 'customer'
          AND policyname = 'Users can view own customer data'
    ) THEN
        EXECUTE FORMAT(
            'CREATE POLICY "Users can view own customer data" ON public.customer
                FOR SELECT
                USING (auth.uid() = user_id)'
        );
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Create the "Users can update own data" policy
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_policies
        WHERE schemaname = 'public'
          AND tablename = 'customer'
          AND policyname = 'Users can update own customer data'
    ) THEN
        EXECUTE FORMAT(
            'CREATE POLICY "Users can update own customer data" ON public.customer
                FOR UPDATE
                USING (auth.uid() = user_id)'
        );
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Create the "Service role can insert users" policy
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM pg_policies
        WHERE schemaname = 'public'
          AND tablename = 'customer'
          AND policyname = 'Service role can insert customer'
    ) THEN
        EXECUTE FORMAT(
            'CREATE POLICY "Service role can insert customer" ON public.customer
                FOR INSERT
                WITH CHECK (true)'
        );
    END IF;
END;
$$ LANGUAGE plpgsql;
